simple_function <- function(x, y, z) {
expectedVal <- x*x + y*y
if (expectedVal == z)
return(TRUE)
else
return(FALSE)
}
simple_function(1,2,3)
simple_function(1,2,5)
#     b. Think of a strategy to check the number of missing values in every
#        column using no more than 3 lines of code. Hint: think about last
#        week's lecture. Explain your strategy in words.
#       [code completion + comprehension]
for(i in 1:ncol(dogs)) {
print(sum(is.na(dogs[,i])))
}
# 6. Load the dogs data from the `dogs.rds` file provided in lecture.
#
dogs = read.csv('dogs.csv')
#     b. Think of a strategy to check the number of missing values in every
#        column using no more than 3 lines of code. Hint: think about last
#        week's lecture. Explain your strategy in words.
#       [code completion + comprehension]
for(i in 1:ncol(dogs)) {
print(sum(is.na(dogs[,i])))
}
# 6. Load the dogs data from the `dogs.rds` file provided in lecture.
#
setwd('/Users/haset/sts115_jozomaro/files_in_r/best_in_show')
dogs = read.csv('dogs.csv')
#     a. How many missing values are in the `height` column?
#       [code completion + comprehension]
#
nrow(dogs[is.na(dogs$height), ])
dim(dogs[is.na(dogs$height), ])
sum(is.na(dogs$height))
#     b. Think of a strategy to check the number of missing values in every
#        column using no more than 3 lines of code. Hint: think about last
#        week's lecture. Explain your strategy in words.
#       [code completion + comprehension]
for(i in 1:ncol(dogs)) {
print(sum(is.na(dogs[,i])))
}
